using MoreShipUpgrades.Compat;
using MoreShipUpgrades.Managers;
using MoreShipUpgrades.Misc.Upgrades;
using MoreShipUpgrades.Misc.Util;
using MoreShipUpgrades.UI.TerminalNodes;
using MoreShipUpgrades.UpgradeComponents.Interfaces;
using Unity.Netcode;
using UnityEngine;

namespace MoreShipUpgrades.UpgradeComponents.OneTimeUpgrades
{
    class MalwareBroadcaster : OneTimeUpgrade, IUpgradeWorldBuilding
    {
        internal const string UPGRADE_NAME = "Malware Broadcaster";
        internal const string WORLD_BUILDING_TEXT = "\n\nIt used to be, back before the War, there was this rumor spread around about a 'failsafe equation'" +
            " you could use to dispel forgotten landmines when you were exploring the Ruins. This string of logic has been hollered down dark stone hallways," +
            " been hurriedly punched into keypads, and been etched into peoples' mailboxes & doorjambs all over the Solar System for a century." +
            " The Company is selling your own cultural memories back to you.\n\n";
        public static MalwareBroadcaster instance;

        public string GetWorldBuildingText(bool shareStatus = false)
        {
            return WORLD_BUILDING_TEXT;
        }
        void Awake()
        {
            upgradeName = UPGRADE_NAME;
            overridenUpgradeName = GetConfiguration().MalwareBroadcasterUpgradeConfiguration.OverrideName;
            instance = this;
        }

        [ServerRpc(RequireOwnership = false)]
        public void ReqDestroyObjectServerRpc(NetworkObjectReference go)
        {
            go.TryGet(out NetworkObject netObj);
            if (netObj == null)
            {
                HUDManager.Instance.AddTextToChatOnServer("Can't retrieve obj", 0);
                return;
            }
            if (GetConfiguration().MalwareBroadcasterUpgradeConfiguration.ExplodeTraps.Value) { SpawnExplosionClientRpc(netObj.gameObject.transform.position); }
            netObj.Despawn();
        }
        internal static bool IsMapHazard(ref TerminalAccessibleObject possibleHazard)
        {
            // if this game object has the respective layer, automatically consider it as a Map Hazard
            bool hasMapHazardLayer = possibleHazard.gameObject.layer == LayerMask.NameToLayer("MapHazards");
            if (hasMapHazardLayer) return true;

            // if its parent has the respective layer, automatically consider it as a Map Hazard
            bool parentHasMapHazardLayer = possibleHazard.transform.parent != null && possibleHazard.transform.parent.gameObject.layer == LayerMask.NameToLayer("MapHazards");
            if (parentHasMapHazardLayer) return true;

            // Otherwise check vanilla assets one by one (this is the worst case whenever a layer is forgotten to be attributed to the prefab for easier checking rather than iterating through all its components)
            if (IsLandmine(ref possibleHazard)) return true;
            if (IsTurret(ref possibleHazard)) return true;

            if (MissileTurretsCompat.Enabled && MissileTurretsCompat.IsMissileTurret(ref possibleHazard)) return true;

            return IsSpikeRoofTrap(ref possibleHazard);
        }

        internal static bool IsLandmine(ref TerminalAccessibleObject possibleHazard)
        {
            return possibleHazard.GetComponent<Landmine>() != null;
        }
        internal static bool IsTurret(ref TerminalAccessibleObject possibleHazard)
        {
            return possibleHazard.GetComponent<Turret>() != null;
        }
        internal static bool IsSpikeRoofTrap(ref TerminalAccessibleObject possibleHazard)
        {
            Transform parent = possibleHazard.transform.parent;
            if (parent == null) return false;
            Transform animContainer = parent.Find("AnimContainer");
            if (animContainer == null) return false;
            return animContainer.GetComponentInChildren<SpikeRoofTrap>() != null;
        }

        [ClientRpc]
        private void SpawnExplosionClientRpc(Vector3 position)
        {
            if (GetConfiguration().MalwareBroadcasterUpgradeConfiguration.ExplodeTraps.Value) { Tools.SpawnExplosion(position + Vector3.up, true, 5.7f, 6.4f); }
        }

        public override string GetDisplayInfo(int price = -1)
        {
            string desc;
            if (GetConfiguration().MalwareBroadcasterUpgradeConfiguration.DestroyTraps.Value)
            {
                if (GetConfiguration().MalwareBroadcasterUpgradeConfiguration.ExplodeTraps.Value)
                {
                    desc = "Broadcasted codes now explode map hazards.";
                }
                else
                {
                    desc = "Broadcasted codes now destroy map hazards.";
                }
            }
            else { desc = $"Broadcasted codes now disable map hazards for {GetConfiguration().MalwareBroadcasterUpgradeConfiguration.DisarmTime.Value} seconds."; }
            return $"${GetUpgradePrice(price, GetConfiguration().MalwareBroadcasterUpgradeConfiguration.PurchaseMode)} - " + desc;
        }
        public override bool CanInitializeOnStart => GetConfiguration().MalwareBroadcasterUpgradeConfiguration.Price.Value <= 0;
        public new static (string, string[]) RegisterScrapToUpgrade()
        {
            return (UPGRADE_NAME, GetConfiguration().MalwareBroadcasterUpgradeConfiguration.ItemProgressionItems.Value.Split(","));
        }
        public new static void RegisterUpgrade()
        {
            SetupGenericPerk<MalwareBroadcaster>(UPGRADE_NAME);
        }
        public new static CustomTerminalNode RegisterTerminalNode()
        {
            return UpgradeBus.Instance.SetupOneTimeTerminalNode(UPGRADE_NAME, GetConfiguration().MalwareBroadcasterUpgradeConfiguration);
        }
    }
}
