using MoreShipUpgrades.Managers;
using MoreShipUpgrades.Misc.Upgrades;
using MoreShipUpgrades.Misc.Util;
using Unity.Netcode;
using UnityEngine;

namespace MoreShipUpgrades.UpgradeComponents.OneTimeUpgrades
{
    class MalwareBroadcaster : OneTimeUpgrade
    {
        internal const string UPGRADE_NAME = "Malware Broadcaster";
        public static MalwareBroadcaster instance;
        void Awake()
        {
            upgradeName = UpgradeBus.Instance.PluginConfiguration.OVERRIDE_UPGRADE_NAMES ? UpgradeBus.Instance.PluginConfiguration.MALWARE_BROADCASTER_OVERRIDE_NAME : UPGRADE_NAME;
            instance = this;
        }

        [ServerRpc(RequireOwnership = false)]
        public void ReqDestroyObjectServerRpc(NetworkObjectReference go)
        {
            go.TryGet(out NetworkObject netObj);
            if (netObj == null)
            {
                HUDManager.Instance.AddTextToChatOnServer("Can't retrieve obj", 0);
                return;
            }
            if (UpgradeBus.Instance.PluginConfiguration.EXPLODE_TRAP.Value) { SpawnExplosionClientRpc(netObj.gameObject.transform.position); }
            Destroy(netObj.gameObject);
        }

        internal static bool IsMapHazard(ref TerminalAccessibleObject possibleHazard)
        {
            // if this game object has the respective layer, automatically consider it as a Map Hazard
            bool hasMapHazardLayer = possibleHazard.gameObject.layer == LayerMask.NameToLayer("MapHazards");
            if (hasMapHazardLayer) return true;

            // if its parent has the respective layer, automatically consider it as a Map Hazard
            bool parentHasMapHazardLayer = possibleHazard.transform.parent != null && possibleHazard.transform.parent.gameObject.layer == LayerMask.NameToLayer("MapHazards");
            if (parentHasMapHazardLayer) return true;

            // Otherwise check vanilla assets one by one (this is the worst case whenever a layer is forgotten to be attributed to the prefab for easier checking rather than iterating through all its components)
            if (IsLandmine(ref possibleHazard)) return true;
            if (IsTurret(ref possibleHazard)) return true;

            return IsSpikeRoofTrap(ref possibleHazard);
        }
        internal static bool IsLandmine(ref TerminalAccessibleObject possibleHazard)
        {
            bool isLandmine = possibleHazard.GetComponent<Landmine>() != null;
            return isLandmine;
        }
        internal static bool IsTurret(ref TerminalAccessibleObject possibleHazard)
        {
            bool isTurret = possibleHazard.GetComponent<Turret>() != null;
            return isTurret;
        }
        internal static bool IsSpikeRoofTrap(ref TerminalAccessibleObject possibleHazard)
        {
            Transform parent = possibleHazard.transform.parent;
            if (parent == null) return false;
            Transform animContainer = parent.Find("AnimContainer");
            if (animContainer == null) return false;
            bool isSpike = animContainer.GetComponentInChildren<SpikeRoofTrap>() != null;
            return isSpike;
        }

        [ClientRpc]
        private void SpawnExplosionClientRpc(Vector3 position)
        {
            if (UpgradeBus.Instance.PluginConfiguration.EXPLODE_TRAP.Value) { Tools.SpawnExplosion(position + Vector3.up, true, 5.7f, 6.4f); }
        }

        public override string GetDisplayInfo(int price = -1)
        {
            string desc;
            if (UpgradeBus.Instance.PluginConfiguration.DESTROY_TRAP.Value)
            {
                if (UpgradeBus.Instance.PluginConfiguration.EXPLODE_TRAP.Value)
                {
                    desc = "Broadcasted codes now explode map hazards.";
                }
                else
                {
                    desc = "Broadcasted codes now destroy map hazards.";
                }
            }
            else { desc = $"Broadcasted codes now disable map hazards for {UpgradeBus.Instance.PluginConfiguration.DISARM_TIME.Value} seconds."; }
            return $"${price} - " + desc;
        }
        internal override bool CanInitializeOnStart()
        {
            return UpgradeBus.Instance.PluginConfiguration.MALWARE_BROADCASTER_PRICE.Value <= 0;
        }
    }
}
