using MoreShipUpgrades.Managers;
using MoreShipUpgrades.Misc;
using MoreShipUpgrades.Misc.Upgrades;
using MoreShipUpgrades.Misc.Util;
using MoreShipUpgrades.UI.TerminalNodes;
using MoreShipUpgrades.UpgradeComponents.TierUpgrades.AttributeUpgrades;
using UnityEngine;

namespace MoreShipUpgrades.UpgradeComponents.TierUpgrades.Player
{
    internal class EffectiveBandaids : TierUpgrade
    {
        internal const string UPGRADE_NAME = "Effective Bandaids";
        internal const string DEFAULT_PRICES = "300,400,550";

        internal override void Start()
        {
            upgradeName = UPGRADE_NAME;
            overridenUpgradeName = GetConfiguration().EFFECTIVE_BANDAIDS_OVERRIDE_NAME;
            base.Start();
        }
        public override string GetDisplayInfo(int initialPrice = -1, int maxLevels = -1, int[] incrementalPrices = null)
        {
            static float infoFunction(int level)
            {
                LategameConfiguration config = GetConfiguration();
                return config.EFFECTIVE_BANDAIDS_INITIAL_HEALTH_REGEN_AMOUNT_INCREASE.Value + (level * config.EFFECTIVE_BANDAIDS_INCREMENTAL_HEALTH_REGEN_AMOUNT_INCREASE.Value);
            }
            const string infoFormat = "LVL {0} - ${1} - Increases the amount of health regenerated by {2}\n";
            return Tools.GenerateInfoForUpgrade(infoFormat, initialPrice, incrementalPrices, infoFunction);
        }
        public static int GetIncreasedHealthRegenerated(int defaultValue)
        {
            LategameConfiguration config = GetConfiguration();
            if (!config.EFFECTIVE_BANDAIDS_ENABLED) return defaultValue;
            if (!GetActiveUpgrade(UPGRADE_NAME)) return defaultValue;
            int additionalHealthRegen = config.EFFECTIVE_BANDAIDS_INITIAL_HEALTH_REGEN_AMOUNT_INCREASE + (GetUpgradeLevel(UPGRADE_NAME) * config.EFFECTIVE_BANDAIDS_INCREMENTAL_HEALTH_REGEN_AMOUNT_INCREASE);
            return Mathf.Clamp(defaultValue + additionalHealthRegen, defaultValue, Stimpack.CheckForAdditionalHealth(100));
        }

        public override bool CanInitializeOnStart
        {
            get
            {
                LategameConfiguration config = GetConfiguration();
                string[] prices = config.EFFECTIVE_BANDAIDS_PRICES.Value.Split(',');
                return config.EFFECTIVE_BANDAIDS_PRICE.Value <= 0 && prices.Length == 1 && (prices[0].Length == 0 || prices[0] == "0");
            }
        }
        public new static (string, string[]) RegisterScrapToUpgrade()
        {
            return (UPGRADE_NAME, GetConfiguration().EFFECTIVE_BANDAIDS_ITEM_PROGRESSION_ITEMS.Value.Split(","));
        }
        public new static void RegisterUpgrade()
        {
            GameObject prefab = LethalLib.Modules.NetworkPrefabs.CreateNetworkPrefab(UPGRADE_NAME);
            prefab.AddComponent<EffectiveBandaids>();
            LethalLib.Modules.NetworkPrefabs.RegisterNetworkPrefab(prefab);
            Plugin.networkPrefabs[UPGRADE_NAME] = prefab;
        }
        public new static CustomTerminalNode RegisterTerminalNode()
        {
            LategameConfiguration configuration = GetConfiguration();

            return UpgradeBus.Instance.SetupMultiplePurchasableTerminalNode(UPGRADE_NAME,
                                                configuration.SHARED_UPGRADES || !configuration.EFFECTIVE_BANDAIDS_INDIVIDUAL,
                                                configuration.EFFECTIVE_BANDAIDS_ENABLED,
                                                configuration.EFFECTIVE_BANDAIDS_PRICE,
                                                UpgradeBus.ParseUpgradePrices(configuration.EFFECTIVE_BANDAIDS_PRICES),
                                                configuration.OVERRIDE_UPGRADE_NAMES ? configuration.EFFECTIVE_BANDAIDS_OVERRIDE_NAME : "",
                                                Plugin.networkPrefabs[UPGRADE_NAME]);
        }
    }
}
